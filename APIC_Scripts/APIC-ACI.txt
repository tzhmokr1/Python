- no cli config on the nexus9k any longer
- Two modes of operation to support different operational models:
  Standalone with NX-API or by APIC (ACI)
- Endpoint_Groups (Policy) for something
- Visore https://<APIC IP ADDRESS>/visore.html (like swagger in APIC-EM)
- API Inspector


PYTHON
------
import requests
import json

def get_cookies(apic):
	username = 'admin'
	password = 'cisco123'
	url = apic + '/api/aaaLogin.json'
	auth = dict(aaaUser=dict(attributes=dict(name=username, pwd=password)))
	authenticate = requests.post(url, data=json.dumps(auth), verify=False)
	return authenticate.cookies

if __name__ == "__main__":
	protocol = 'http'
	host = 'apic'
	apic = '{0}://{1}'.format(protocol, host)
	cookies = get_cookies(apic)

def get_subnets(apic, cookies):
	uri = '/api/class/fvSubnet.json'
	url = apic + uri
	req = requests.get(url, cookies=cookies, verify=False)
	response = req.text
	return response

rsp = get_subnets(apic,cookies)
# rsp is a unicode string

rsp_dict = json.loads(rsp)
subnets = rsp_dict['imdata']

>>> for subnets in subnets:
...     print subnets['fvSubnet']['attributes']['ip']



Cobra SDK
---------
Cobra is a robust Python library for the APIC REST API. Objects in the Cobra library
(SDK) are a 1:1 mapping to the objects within the ACI MIT

http://cobra.readthedocs.io/

installation is done by downloading directly from APIC. Two separate packages:
http[s]://<apic>/cobra/_downloads
acicobra
acimodel


sudo easy_install –Z acicobra-1.*-py2.7.egg acicobra
sudo easy_install –Z acimodel-1.*-py2.7.egg acimodel

from cobra.mit.access import MoDirectory
from cobra.mit.session import LoginSession
from cobra.mit.request import ConfigRequest
from cobra.internal.codec.xmlcodec import toXMLStr
from cobra.model.fv import Tenant
from cobra.model.vz import Filter
from cobra import model

def get_tenant(moDir, name):
    mo = moDir.lookupByDn('uni/tn-{0}'.format(name))
    return mo

if __name__ == "__main__":
    username = 'admin'
    password = 'Cisco123'
    protocol = 'https'
    host = 'apic'

    apic = '{0}://{1}'.format(protocol, host)

    session = LoginSession(apic, username, password)
    moDir = MoDirectory(session)
    moDir.login()

session = LoginSession(apic, username, password)
 moDir = MoDirectory(session)
 moDir.login()




Arya
----
ARYA creates Python Code from REST objects using Cobra
arya.py –f filename.json

$ arya.py -f newtenant.json 
#!/usr/bin/env python
'''
Autogenerated code using arya.py
Original Object Document Input: 
{"fvTenant":{"attributes":{"dn":"uni/tn-TENANT6","name":"TENANT6","descr":"sample-test-for-cisco","rn":"tn-TENANT6","status":"created"},"children":[]}} 
'''
raise RuntimeError('Please review the auto generated code before ' +
                    'executing the output. Some placeholders will ' +
                    'need to be changed')
# list of packages that should be imported for this code to work
import cobra.mit.access
import cobra.mit.session
import cobra.mit.request
import cobra.model.fv
import cobra.model.pol
from cobra.internal.codec.xmlcodec import toXMLStr
# log into an APIC and create a directory object
ls = cobra.mit.session.LoginSession('https://1.1.1.1', 'admin', 'password')
md = cobra.mit.access.MoDirectory(ls)
md.login()
# the top level object on which operations will be made
topMo = cobra.model.pol.Uni('')
# build the request using cobra syntax
fvTenant = cobra.model.fv.Tenant(topMo, name=u'TENANT6', descr=u'sample-test-for-cisco')
# commit the generated code to APIC
print toXMLStr(topMo)
c = cobra.mit.request.ConfigRequest()
c.addMo(topMo)
md.commit(c)



ACI Toolkit (Python Library - Used to generate REST API calls)
--------------------------------------------------------------
https://github.com/datacenter/acitoolkit
http://datacenter.github.io/acitoolkit

Applications:
-------------

CLI ->  python acitoolkitcli.py -l admin -p c1sco123 -u http://198.18.133.200
        fabric# show tenant

Diagrams ->  python diagram.py -o aci.png
	     (Auto-generate visual representation of tenant objects)

Lint  ->  python acilint.py -0 html
	  Static analysis tool for Cisco ACI fabrics
         
Cable Plan ->  python cableplan.py -e existing_cabling
	       Export existing cabling scheme from existing ACI fabrics

Event Feeds  ->  python eventfeeds.py --ip 192.168.56.101 --port 5001
		 ACI Events to Atom Feeds

Fake APIC  ->  
The Fake APIC is designed for users to view Managed Objects based on
JSON configuration files.The Fake APIC works as an offline-tool for users
who may not have access to the APIC, but still want to see certain (or all)
Managed Objects on the network.

import json  
 
session = FakeSession(filenames) 
query = '/api/mo/uni/tn-tenant1/BD-1.json?query-target=children' 
fake_ret = fake_session.get(query) 
fake_data = fake_ret.json()['imdata'] 
data = fake_ret.json()['imdata'] 
# print the data from the Fake APIC 
print json.dumps(data, indent=4)


SAMPLE PYTHON SCRIPT:
---------------------
import requests
import json

def get_cookies(apic):
	username = 'admin'
	password = 'cisco123'
	url = apic + '/api/aaaLogin.json'
	auth = dict(aaaUser=dict(attributes=dict(name=username, pwd=password)))
	authenticate = requests.post(url, data=json.dumps(auth), verify=False)
	return authenticate.cookies

def add_tenant(apic,cookies):
	jsondata = {"fvTenant":{"attributes":{"dn":"uni/tn-Procurement","name":"Procurement","rn":"tn-Procurement","status":"created"},"children":[]}}
	result = requests.post('{0}://{1}/api/node/mo/uni/tn-Procurement.json'.format(protocol, host), cookies=cookies, data=json.dumps(jsondata), verify=False)
	print result.status_code
	print result.text

def add_vrf(apic,cookies):
	jsondata = {"fvCtx":{"attributes":{"dn":"uni/tn-Procurement/ctx-Internal","name":"Internal","rn":"ctx-Internal","status":"created"},"children":[]}}
	result = requests.post('{0}://{1}/api/node/mo/uni/tn-Procurement/ctx-Internal.json'.format(protocol, host), cookies=cookies, data=json.dumps(jsondata), verify=False)
	print result.status_code
	print result.text

def get_tenants(apic, cookies):
	uri = '/api/class/fvTenant.json'
	url = apic + uri
	req = requests.get(url, cookies=cookies, verify=False)
	response = req.text
	return response

if __name__ == "__main__":
	protocol = 'http' 
	host = 'apic' 
	apic = '{0}://{1}'.format(protocol, host) 
	cookies = get_cookies(apic) 
      add_tenant(apic,cookies)
      add_vrf(apic,cookies)
      rsp = get_tenants(apic,cookies)
rsp_dict = json.loads(rsp)
      tenants = rsp_dict['imdata']

for tenant in tenants:
      print tenant['fvTenant']['attributes']['name']


























